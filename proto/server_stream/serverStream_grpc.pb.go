// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: serverStream.proto

package serverStream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerStreamServiceClient is the client API for ServerStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerStreamServiceClient interface {
	ServerStream(ctx context.Context, in *ServerStreamReq, opts ...grpc.CallOption) (ServerStreamService_ServerStreamClient, error)
}

type serverStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStreamServiceClient(cc grpc.ClientConnInterface) ServerStreamServiceClient {
	return &serverStreamServiceClient{cc}
}

func (c *serverStreamServiceClient) ServerStream(ctx context.Context, in *ServerStreamReq, opts ...grpc.CallOption) (ServerStreamService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerStreamService_ServiceDesc.Streams[0], "/serverStream.ServerStreamService/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStreamService_ServerStreamClient interface {
	Recv() (*ServerStreamRes, error)
	grpc.ClientStream
}

type serverStreamServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *serverStreamServiceServerStreamClient) Recv() (*ServerStreamRes, error) {
	m := new(ServerStreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamServiceServer is the server API for ServerStreamService service.
// All implementations must embed UnimplementedServerStreamServiceServer
// for forward compatibility
type ServerStreamServiceServer interface {
	ServerStream(*ServerStreamReq, ServerStreamService_ServerStreamServer) error
	mustEmbedUnimplementedServerStreamServiceServer()
}

// UnimplementedServerStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerStreamServiceServer struct {
}

func (UnimplementedServerStreamServiceServer) ServerStream(*ServerStreamReq, ServerStreamService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedServerStreamServiceServer) mustEmbedUnimplementedServerStreamServiceServer() {}

// UnsafeServerStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerStreamServiceServer will
// result in compilation errors.
type UnsafeServerStreamServiceServer interface {
	mustEmbedUnimplementedServerStreamServiceServer()
}

func RegisterServerStreamServiceServer(s grpc.ServiceRegistrar, srv ServerStreamServiceServer) {
	s.RegisterService(&ServerStreamService_ServiceDesc, srv)
}

func _ServerStreamService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamServiceServer).ServerStream(m, &serverStreamServiceServerStreamServer{stream})
}

type ServerStreamService_ServerStreamServer interface {
	Send(*ServerStreamRes) error
	grpc.ServerStream
}

type serverStreamServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *serverStreamServiceServerStreamServer) Send(m *ServerStreamRes) error {
	return x.ServerStream.SendMsg(m)
}

// ServerStreamService_ServiceDesc is the grpc.ServiceDesc for ServerStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serverStream.ServerStreamService",
	HandlerType: (*ServerStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _ServerStreamService_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "serverStream.proto",
}
