// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: single.proto

package single

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SingleServiceClient is the client API for SingleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SingleServiceClient interface {
	//rpc服务，服务名：“add” 请求参数（结构体）：AddReq  响应参数（结构体）：AddRes
	Single(ctx context.Context, in *SingleReq, opts ...grpc.CallOption) (*SingleRes, error)
}

type singleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSingleServiceClient(cc grpc.ClientConnInterface) SingleServiceClient {
	return &singleServiceClient{cc}
}

func (c *singleServiceClient) Single(ctx context.Context, in *SingleReq, opts ...grpc.CallOption) (*SingleRes, error) {
	out := new(SingleRes)
	err := c.cc.Invoke(ctx, "/single.SingleService/Single", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SingleServiceServer is the server API for SingleService service.
// All implementations must embed UnimplementedSingleServiceServer
// for forward compatibility
type SingleServiceServer interface {
	//rpc服务，服务名：“add” 请求参数（结构体）：AddReq  响应参数（结构体）：AddRes
	Single(context.Context, *SingleReq) (*SingleRes, error)
	mustEmbedUnimplementedSingleServiceServer()
}

// UnimplementedSingleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSingleServiceServer struct {
}

func (UnimplementedSingleServiceServer) Single(context.Context, *SingleReq) (*SingleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Single not implemented")
}
func (UnimplementedSingleServiceServer) mustEmbedUnimplementedSingleServiceServer() {}

// UnsafeSingleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SingleServiceServer will
// result in compilation errors.
type UnsafeSingleServiceServer interface {
	mustEmbedUnimplementedSingleServiceServer()
}

func RegisterSingleServiceServer(s grpc.ServiceRegistrar, srv SingleServiceServer) {
	s.RegisterService(&SingleService_ServiceDesc, srv)
}

func _SingleService_Single_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SingleServiceServer).Single(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/single.SingleService/Single",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SingleServiceServer).Single(ctx, req.(*SingleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SingleService_ServiceDesc is the grpc.ServiceDesc for SingleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SingleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "single.SingleService",
	HandlerType: (*SingleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Single",
			Handler:    _SingleService_Single_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "single.proto",
}
